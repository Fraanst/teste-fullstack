// <auto-generated />
using System;
using DataInfrastructure.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DataInfrastructure.Migrations
{
    [DbContext(typeof(CVContext))]
    partial class CVContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("cv.Domain.Entity.Competencias", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Competencia");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("CurriculumId");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("Nivel");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.HasIndex("CurriculumId");

                    b.ToTable("Competencias");
                });

            modelBuilder.Entity("cv.Domain.Entity.Conquistas", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Conquista");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("CurriculumId");

                    b.Property<DateTime>("DateConquista");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Observacao");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.HasIndex("CurriculumId");

                    b.ToTable("Conquistas");
                });

            modelBuilder.Entity("cv.Domain.Entity.Curriculum", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("End");

                    b.Property<string>("Interesses");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Linkedin");

                    b.Property<string>("Resumo");

                    b.Property<string>("SITE");

                    b.Property<string>("Telefone");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Curriculum");
                });

            modelBuilder.Entity("cv.Domain.Entity.ExperienciaProfissional", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Atribuicoes");

                    b.Property<string>("Cargo");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("CurriculumId");

                    b.Property<DateTime>("DateEnd");

                    b.Property<DateTime>("DateIn");

                    b.Property<string>("Empresa");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.HasIndex("CurriculumId");

                    b.ToTable("ExperienciaProfissional");
                });

            modelBuilder.Entity("cv.Domain.Entity.FormacaoAcademica", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("CurriculumId");

                    b.Property<string>("Curso");

                    b.Property<DateTime>("DateEnd");

                    b.Property<DateTime>("Datein");

                    b.Property<string>("Instituicao");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.HasIndex("CurriculumId");

                    b.ToTable("FormacaoAcademica");
                });

            modelBuilder.Entity("cv.Domain.Entity.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("CurriculumId");

                    b.Property<string>("Email");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("cv.Domain.Entity.Competencias", b =>
                {
                    b.HasOne("cv.Domain.Entity.Curriculum", "Curriculum")
                        .WithMany("Competencias")
                        .HasForeignKey("CurriculumId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("cv.Domain.Entity.Conquistas", b =>
                {
                    b.HasOne("cv.Domain.Entity.Curriculum", "Curriculum")
                        .WithMany("Conquistas")
                        .HasForeignKey("CurriculumId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("cv.Domain.Entity.Curriculum", b =>
                {
                    b.HasOne("cv.Domain.Entity.User", "User")
                        .WithOne("Curriculum")
                        .HasForeignKey("cv.Domain.Entity.Curriculum", "UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("cv.Domain.Entity.ExperienciaProfissional", b =>
                {
                    b.HasOne("cv.Domain.Entity.Curriculum", "Curriculum")
                        .WithMany("ExperienciaProfissional")
                        .HasForeignKey("CurriculumId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("cv.Domain.Entity.FormacaoAcademica", b =>
                {
                    b.HasOne("cv.Domain.Entity.Curriculum", "Curriculum")
                        .WithMany("FormacaoAcademica")
                        .HasForeignKey("CurriculumId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
